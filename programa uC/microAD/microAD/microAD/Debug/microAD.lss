
microAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800060  00800060  00000396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000710  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000559  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e9  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	86 c0       	rjmp	.+268    	; 0x114 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	e4 c0       	rjmp	.+456    	; 0x1f0 <__vector_14+0x50>
  28:	f0 c0       	rjmp	.+480    	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
  2a:	fc c0       	rjmp	.+504    	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
  2c:	08 c1       	rjmp	.+528    	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
  2e:	14 c1       	rjmp	.+552    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
  30:	20 c1       	rjmp	.+576    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
  32:	2c c1       	rjmp	.+600    	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf e5       	ldi	r28, 0x5F	; 95
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 38       	cpi	r26, 0x85	; 133
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	36 d1       	rcall	.+620    	; 0x2be <main>
  52:	65 c1       	rjmp	.+714    	; 0x31e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <SPI_SlaveInit>:


void SPI_SlaveInit()
{
	// Set MISO output, all others input
	DDRB = (1<<PB4);
  56:	80 e1       	ldi	r24, 0x10	; 16
  58:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, SLAVE, set clock /128
	// SPCR -> SPIE SPE DORD MSTR CPOL CPHA SPR1 SPR0
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<CPHA);
  5a:	84 ec       	ldi	r24, 0xC4	; 196
  5c:	8d b9       	out	0x0d, r24	; 13
  5e:	08 95       	ret

00000060 <__vector_10>:
}

ISR (SPI_STC_vect)
{
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	2f 93       	push	r18
  6c:	3f 93       	push	r19
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
  72:	ef 93       	push	r30
  74:	ff 93       	push	r31
	SPDR = data.SPI_TX_data[SPI_TX_pt];
  76:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <SPI_TX_pt>
  7a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <SPI_TX_pt+0x1>
  7e:	e9 59       	subi	r30, 0x99	; 153
  80:	ff 4f       	sbci	r31, 0xFF	; 255
  82:	80 81       	ld	r24, Z
  84:	8f b9       	out	0x0f, r24	; 15
	SPI_Timeout=0; // prepara timeout
  86:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(SPI_TX_pt<SPI_data_size)
  8e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SPI_TX_pt>
  92:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <SPI_TX_pt+0x1>
  96:	8e 30       	cpi	r24, 0x0E	; 14
  98:	91 05       	cpc	r25, r1
  9a:	2c f4       	brge	.+10     	; 0xa6 <__vector_10+0x46>
	{
		SPI_RX_data[SPI_TX_pt-1]=SPDR;
  9c:	2f b1       	in	r18, 0x0f	; 15
  9e:	fc 01       	movw	r30, r24
  a0:	ec 58       	subi	r30, 0x8C	; 140
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	20 83       	st	Z, r18
	}
	if(SPI_TX_pt==SPI_data_size)
  a6:	8e 30       	cpi	r24, 0x0E	; 14
  a8:	91 05       	cpc	r25, r1
  aa:	89 f4       	brne	.+34     	; 0xce <__vector_10+0x6e>
	{
		SPI_RX_data[SPI_TX_pt-1]=SPDR;
  ac:	2f b1       	in	r18, 0x0f	; 15
  ae:	fc 01       	movw	r30, r24
  b0:	ec 58       	subi	r30, 0x8C	; 140
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	20 83       	st	Z, r18
		SPI_Reception_OK=1;
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <SPI_Reception_OK+0x1>
  be:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <SPI_Reception_OK>
		SPI_Timeout=2;
  c2:	22 e0       	ldi	r18, 0x02	; 2
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ca:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	SPI_TX_pt++;
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SPI_TX_pt+0x1>
  d4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SPI_TX_pt>
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <SPI_StartReception>:

void SPI_StartReception()
{
	SPDR = data.SPI_TX_data[0];
  ee:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <data>
  f2:	8f b9       	out	0x0f, r24	; 15
	SPI_TX_pt=1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SPI_TX_pt+0x1>
  fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SPI_TX_pt>
 100:	08 95       	ret

00000102 <inicia_timer_1ms>:
//	Liga o temporizador com o intervalor ajustado para 1ms
//	Ajustar para o clock utilizado
//////////////////////////////////////////////////////////////////////////////////////////////////
void  inicia_timer_1ms()
{
	OCR2=123;			// Ajusta o valor de comparação do timer 2
 102:	8b e7       	ldi	r24, 0x7B	; 123
 104:	83 bd       	out	0x23, r24	; 35
	TCNT2=0;			// Zera a contagem do timer 2
 106:	14 bc       	out	0x24, r1	; 36
	TCCR2=0b00001010;	// habilita o clock do timer 2 com prescaller
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	85 bd       	out	0x25, r24	; 37
	TIMSK|=0b10000000;	// habilita a interrupção do timer 2
 10c:	89 b7       	in	r24, 0x39	; 57
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	89 bf       	out	0x39, r24	; 57
 112:	08 95       	ret

00000114 <__vector_3>:
//////////////////////////////////////////////////////////////////////////////////////////////////
//	Interrupção de temporizador 2
//////////////////////////////////////////////////////////////////////////////////////////////////

ISR(TIMER2_COMP_vect) // interrupção do temporizador
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
	if(SPI_Timeout<2)
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	91 05       	cpc	r25, r1
 142:	2c f4       	brge	.+10     	; 0x14e <__vector_3+0x3a>
	{
		SPI_Timeout++;
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if(SPI_Timeout==2) // timeout da SPI
 14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 156:	02 97       	sbiw	r24, 0x02	; 2
 158:	09 f4       	brne	.+2      	; 0x15c <__vector_3+0x48>
	{
		SPI_StartReception(); //reinicia a recepção
 15a:	c9 df       	rcall	.-110    	; 0xee <SPI_StartReception>
	}

}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <ADC_init>:

void ADC_init()
{
	// ADMUX -> REFS1 REFS0 ADLAR  MUX3 MUX2 MUX1 MUX0
	ADMUX = (1<<REFS0); // Reference at AVcc, channel 0
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	87 b9       	out	0x07, r24	; 7
	// ADCSRA -> ADEN ADSC ADFR ADIF ADIE ADPS2 ADPS1 ADPS0
	// ADC = On, interrupt = ON, prescaler /128
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 182:	8f e8       	ldi	r24, 0x8F	; 143
 184:	86 b9       	out	0x06, r24	; 6
 186:	08 95       	ret

00000188 <ADC_startConversion>:
}

void ADC_startConversion()
{
	ADC_channel=0;
 188:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <ADC_channel+0x1>
 18c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <ADC_channel>
	ADMUX = (1<<REFS0); // channel 0
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 194:	86 b1       	in	r24, 0x06	; 6
 196:	80 64       	ori	r24, 0x40	; 64
 198:	86 b9       	out	0x06, r24	; 6
	ADC_scanFiniched=0;
 19a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ADC_scanFiniched>
 19e:	08 95       	ret

000001a0 <__vector_14>:
}

ISR (ADC_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	data.valores[ADC_channel] = data.valores[ADC_channel]+ADCW;
 1b6:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <ADC_channel>
 1ba:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <ADC_channel+0x1>
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e9 59       	subi	r30, 0x99	; 153
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	20 81       	ld	r18, Z
 1c8:	31 81       	ldd	r19, Z+1	; 0x01
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	95 b1       	in	r25, 0x05	; 5
 1ce:	82 0f       	add	r24, r18
 1d0:	93 1f       	adc	r25, r19
 1d2:	91 83       	std	Z+1, r25	; 0x01
 1d4:	80 83       	st	Z, r24
	ADMUX = (1<<REFS0); // reset channel
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	87 b9       	out	0x07, r24	; 7
	switch (ADC_channel)
 1da:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <ADC_channel>
 1de:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <ADC_channel+0x1>
 1e2:	e7 30       	cpi	r30, 0x07	; 7
 1e4:	f1 05       	cpc	r31, r1
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <__vector_14+0x4a>
 1e8:	59 c0       	rjmp	.+178    	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 1ea:	ed 5e       	subi	r30, 0xED	; 237
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	09 94       	ijmp
	{
		case 0:
		ADC_channel=1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ADC_channel+0x1>
 1f8:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ADC_channel>
		ADMUX |= 1;
 1fc:	87 b1       	in	r24, 0x07	; 7
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
 202:	86 b1       	in	r24, 0x06	; 6
 204:	80 64       	ori	r24, 0x40	; 64
 206:	86 b9       	out	0x06, r24	; 6
		break;
 208:	4f c0       	rjmp	.+158    	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>

		case 1:
		ADC_channel=2;
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ADC_channel+0x1>
 212:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ADC_channel>
		ADMUX |= 2;
 216:	87 b1       	in	r24, 0x07	; 7
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
 21c:	86 b1       	in	r24, 0x06	; 6
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	86 b9       	out	0x06, r24	; 6
		break;
 222:	42 c0       	rjmp	.+132    	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		case 2:
		ADC_channel=3;
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ADC_channel+0x1>
 22c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ADC_channel>
		ADMUX |= 3;
 230:	87 b1       	in	r24, 0x07	; 7
 232:	83 60       	ori	r24, 0x03	; 3
 234:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
 236:	86 b1       	in	r24, 0x06	; 6
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	86 b9       	out	0x06, r24	; 6
		break;
 23c:	35 c0       	rjmp	.+106    	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		case 3:
		ADC_channel=4;
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ADC_channel+0x1>
 246:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ADC_channel>
		ADMUX |= 4;
 24a:	87 b1       	in	r24, 0x07	; 7
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
 250:	86 b1       	in	r24, 0x06	; 6
 252:	80 64       	ori	r24, 0x40	; 64
 254:	86 b9       	out	0x06, r24	; 6
		break;
 256:	28 c0       	rjmp	.+80     	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>

		case 4:
		ADC_channel=5;
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ADC_channel+0x1>
 260:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ADC_channel>
		ADMUX |= 6; // pulando canal 5 não usado no hardware
 264:	87 b1       	in	r24, 0x07	; 7
 266:	86 60       	ori	r24, 0x06	; 6
 268:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
 26a:	86 b1       	in	r24, 0x06	; 6
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	86 b9       	out	0x06, r24	; 6
		break;
 270:	1b c0       	rjmp	.+54     	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
		case 5:
		ADC_channel=6;
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ADC_channel+0x1>
 27a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ADC_channel>
		ADMUX |= 7;
 27e:	87 b1       	in	r24, 0x07	; 7
 280:	87 60       	ori	r24, 0x07	; 7
 282:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
 284:	86 b1       	in	r24, 0x06	; 6
 286:	80 64       	ori	r24, 0x40	; 64
 288:	86 b9       	out	0x06, r24	; 6
		break;
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
		ADMUX |= 7;
		ADCSRA |= (1<<ADSC);
		break;*/

		case 6:
		ADC_channel=0;
 28c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <ADC_channel+0x1>
 290:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <ADC_channel>
		ADC_scanFiniched=1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ADC_scanFiniched>
		break;
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>

		default:
		ADC_channel=0;
 29c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <ADC_channel+0x1>
 2a0:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <ADC_channel>
		ADMUX = (1<<REFS0); // channel 0
 2a4:	80 e4       	ldi	r24, 0x40	; 64
 2a6:	87 b9       	out	0x07, r24	; 7
	}
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <main>:

int main(void)
{

		ADC_init();
 2be:	5f df       	rcall	.-322    	; 0x17e <ADC_init>
    	SPI_SlaveInit();
 2c0:	ca de       	rcall	.-620    	; 0x56 <SPI_SlaveInit>
    	inicia_timer_1ms();
 2c2:	1f df       	rcall	.-450    	; 0x102 <inicia_timer_1ms>
    	sei();
 2c4:	78 94       	sei
    	SPI_Timeout=0;
 2c6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    while (1) 
    {
		if(SPI_Reception_OK==1)
 2ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SPI_Reception_OK>
 2d2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <SPI_Reception_OK+0x1>
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	d1 f7       	brne	.-12     	; 0x2ce <main+0x10>
		{
			SPI_Reception_OK=0;
 2da:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <SPI_Reception_OK+0x1>
 2de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <SPI_Reception_OK>
			data.valores[0]=0;
 2e2:	e7 e6       	ldi	r30, 0x67	; 103
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	11 82       	std	Z+1, r1	; 0x01
 2e8:	10 82       	st	Z, r1
			data.valores[1]=0;
 2ea:	13 82       	std	Z+3, r1	; 0x03
 2ec:	12 82       	std	Z+2, r1	; 0x02
			data.valores[2]=0;
 2ee:	15 82       	std	Z+5, r1	; 0x05
 2f0:	14 82       	std	Z+4, r1	; 0x04
			data.valores[3]=0;
 2f2:	17 82       	std	Z+7, r1	; 0x07
 2f4:	16 82       	std	Z+6, r1	; 0x06
			data.valores[4]=0;
 2f6:	11 86       	std	Z+9, r1	; 0x09
 2f8:	10 86       	std	Z+8, r1	; 0x08
			data.valores[5]=0;
 2fa:	13 86       	std	Z+11, r1	; 0x0b
 2fc:	12 86       	std	Z+10, r1	; 0x0a
			data.valores[6]=0;
 2fe:	15 86       	std	Z+13, r1	; 0x0d
 300:	14 86       	std	Z+12, r1	; 0x0c
			
			for(int cont=0; cont<50; cont++)
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	06 c0       	rjmp	.+12     	; 0x314 <main+0x56>
			{
				ADC_startConversion();
 308:	3f df       	rcall	.-386    	; 0x188 <ADC_startConversion>
				while(ADC_scanFiniched==0)
 30a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ADC_scanFiniched>
 30e:	88 23       	and	r24, r24
 310:	e1 f3       	breq	.-8      	; 0x30a <main+0x4c>
			data.valores[3]=0;
			data.valores[4]=0;
			data.valores[5]=0;
			data.valores[6]=0;
			
			for(int cont=0; cont<50; cont++)
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	c2 33       	cpi	r28, 0x32	; 50
 316:	d1 05       	cpc	r29, r1
 318:	bc f3       	brlt	.-18     	; 0x308 <main+0x4a>
				while(ADC_scanFiniched==0)
				{
					
				}				
			}			
			SPI_StartReception();
 31a:	e9 de       	rcall	.-558    	; 0xee <SPI_StartReception>
 31c:	d8 cf       	rjmp	.-80     	; 0x2ce <main+0x10>

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
